#!/bin/sh
# by pepper 28/03/2007
# Gracias a jotabe por las mejoras introducidas y por las traducciones de los dias de la
# semana al castellano
# Devuelve el XML con la sincroguia de 1 canal.
# Este script es llamado por otros, y no debería invocarse directamente

cacheTextFile=$2
numChannel=$3
echo -n "" > ${cacheTextFile}

if [ -f $1 ];
then
    DiaSemana=([1]="Lun" [2]="Mar" [3]="Mie" [4]="Jue" [5]="Vie" [6]="Sab" [7]="Dom")
    CHANNEL_ID=`echo $1 | cut -d"_" -f2 | cut -d"." -f1`
    totalBytes=`hexdump -v -n 4 -e '"%d"' $1`
    totalBytes=$((totalBytes+4))
    #realTotalBytes=`wc -c $1 | cut -b1-7`
    realTotalBytes=(`wc -c $1`)
    if [ $realTotalBytes -lt $totalBytes ]; then
        totalBytes=$realTotalBytes
    fi
    mapping=`grep ${CHANNEL_ID} /var/etc/eps_mapping.txt | head -1`
    chName=`echo "$mapping" | cut -d":" -f 1`
    lines=`cat /var/etc/services.txt | grep "$chName" | wc -l`
    if [ $lines -eq 0 ]; then
        mapping=`grep ${CHANNEL_ID} /var/etc/eps_mapping.txt | tail -1`
        idsec=`echo "$mapping" | cut -d"," -f 2`
        if [ "$idsec" = "$CHANNEL_ID" ]; then
            chName=`echo "$mapping" | cut -d":" -f 1`
        fi
    fi
    cid=`cat /var/etc/services.txt | cut -b 87-145 | grep "${CHANNEL_ID} " | cut -b 55-60 | head -1`
    n=4
    nIni=$n
    nextN=$((n+50))
    echo "<CHANNEL cid=\"$cid\" id=\"${CHANNEL_ID}\" name=\"$chName\" file=\"$1\" numChannel=\"$numChannel\">"
    # Limitamos a 15000 bytes (unos 4 días) la lectura del fichero, para no generar un XML intratable
    while [ $totalBytes -gt $nextN -a $n -le 26000 ]; do
    #while [ $totalBytes -gt $nextN ]; do
        # Leemos todos los datos de cada registro de la sincro
        nIni=$n
        declare -a Sincro
        Sincro=( `hexdump -v -n 25 -s $n -e '1/4 "%d \n" 1/4 "%d \n" 1/4 "%X" "\n" 1/4 "%X" "\n" 1/4 "%d \n" 1/4 "%d \n" 1/1 "%d \n"' $1` )
        bytesPgm=${Sincro[0]}
        pid=${Sincro[1]}
        #pidcid1=`printf "%08X" 0x${Sincro[2]}`
        #pidcid2=`printf "%08X" 0x${Sincro[3]}`
        #pidcid=${pidcid1}${pidcid2}
        pidcid=`printf "%08X%08X" 0x${Sincro[2]} 0x${Sincro[3]}`
        dateIni=${Sincro[4]}
        rest=$(($totalBytes-$n))
        if [ $bytesPgm -gt $rest ]; then
            echo "</CHANNEL>"
            echo " [$n bytes read]" >> $Cache/sincro.cache.log
            return
        fi
        longs=${Sincro[5]}
        bytesTitulo=${Sincro[6]}
        n=$((n+25))
        titulo=`hexdump -v -n $bytesTitulo -s $n -e '"%c"' $1 | sed -e 's/&/&amp;/g' | sed -e 's/_/-/g'`
        #titulo=`hexdump -v -n $bytesTitulo -s $n -e "/1 \"&#%d;\"" $1 | sed -e 's/^&#5;//' `
        n=$((n+$bytesTitulo))
        bytesSubtitulo=`hexdump -v -n 2 -s $n -e '1/2 "%d"' $1`
        n=$((n+2))
        subtitulo=`hexdump -v -n $bytesSubtitulo -s $n -e '"%c"' $1 | sed -e 's/&/&amp;/g' | sed -e 's/_/-/g'`
        #subtitulo=`hexdump -v -n $bytesSubtitulo -s $n -e "/1 \"&#%d;\"" $1 | sed -e 's/^&#5;//' `
        n=$((n+$bytesSubtitulo))
        bytesImagen=`hexdump -v -n 1 -s $n -e '1/1 "%d"' $1`
        n=$((n+1))
        imagen=`hexdump -v -n $bytesImagen -s $n -e '"%c"' $1`
        #imagen=`hexdump -v -n $bytesImagen -s $n -e "/1 \"&#%d;\"" $1 | sed -e 's/^&#5;//' `
        n=$((n+$bytesImagen))
        n=$(($bytesPgm+$nIni+4))
        nextN=$((n+50))
        #dateFormat=`awk "BEGIN {print strftime( \"%d.%m.%y %H:%M, %a\" , $dateIni) }"`
        ds=`awk "BEGIN {print strftime( \"%u\" , $dateIni) }"`
        dateFormat=`awk "BEGIN {print strftime( \"%d.%m.%y %H:%M\" , $dateIni) }"`
        dateFormat="$dateFormat, ${DiaSemana[ds]}"
        
        # Generacion del XML
        echo "<PROGRAM id=\"${pid}\" pid=\"${pidcid}\" chid=\"${CHANNEL_ID}\">"
        echo "<TITLE>$titulo</TITLE><SUBTITLE>$subtitulo</SUBTITLE><LONG>$longs</LONG><IMAGE>$imagen</IMAGE><DATE>${dateFormat}</DATE><DATE_UTC>$dateIni</DATE_UTC><DATE_FIN></DATE_FIN>"
        echo "</PROGRAM>"
        
        # Generacion del Texto para la posterior ordenacion temporal
        echo "${dateIni}_${pid}_${pidcid}_${dateFormat}_${longs}_${titulo}_${subtitulo}_${imagen}" >> ${cacheTextFile}
    done
    echo "</CHANNEL>"
    echo " [$n bytes read]" >> $Cache/sincro.cache.log
else
    echo "<ERROR>File $1 not found</ERROR>"
fi
